#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義
// これを使うとkeymapeditorからauto buildできなくなっちゃうので使わない

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W               &kp E         &kp R                 &kp T                                                                                 &kp Y          &kp U  &kp I  &kp O      &kp P
&mt LEFT_SHIFT A    &mt LEFT_SHIFT S    &kp D         &kp F                 &kp G                   &none                            &kp SEMICOLON                &kp H          &kp J  &kp K  &kp L      &kp ENTER
&mt LEFT_CONTROL Z  &mt LEFT_CONTROL X  &kp C         &kp V                 &kp B                   &kp ESCAPE                       &kp COMMA                    &kp PERIOD     &kp N  &kp M  &kp SLASH  &kp MINUS
&kp LCTRL           &kp LEFT_WIN        &kp LEFT_ALT  &lt_to_layer_0 5 TAB  &lt_to_layer_0 3 SPACE  &lt_to_layer_0 2 LA(LS(N0))      &lt_to_layer_0 1 LS(LA(N1))  &kp BACKSPACE                           &lt_to_layer_0 6 DELETE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans      &trans  &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE                            &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&kp ESCAPE  &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans      &trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&trans      &trans  &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans      &trans  &kp F11  &kp F12  &trans  &trans  &trans
&trans      &trans  &trans  &trans                &trans                 &trans      &trans  &trans                            &trans
            >;
        };

        NUM {
            bindings = <
&trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp AT         &kp TILDE  &kp EQUAL
&kp LEFT_SHIFT   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS     &kp LC(LA(KP_NUMBER_0))      &kp PERCENT  &kp GRAVE         &kp SEMICOLON      &kp COLON      &kp HASH   &kp UNDERSCORE
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp ASTERISK  &kp SLASH                    &kp DOLLAR   &kp CARET         &kp EXCLAMATION    &kp AMPERSAND  &kp PIPE   &kp INT_YEN
&trans           &trans           &trans           &trans           &trans        &trans                       &trans       &trans                                                         &kp BACKSLASH
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))     &kp UP_ARROW    &kp LC(TAB)          &trans                       &trans  &kp RC(RS(TAB))  &kp UP_ARROW    &kp RC(TAB)      &trans
&kp HOME        &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp END  &trans      &trans  &trans  &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT  &kp LG(LEFT_ARROW)  &trans          &kp LG(RIGHT_ARROW)  &trans   &trans      &trans  &trans  &trans           &trans          &trans           &trans
&trans          &trans              &trans          &trans               &trans   &trans      &trans  &trans                                                    &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans      &kp HOME        &kp UP_ARROW    &kp END          &trans                      &trans  &trans     &trans     &trans     &trans
&kp ESCAPE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &kp F2
&trans      &trans          &trans          &trans           &trans  &trans      &trans  &trans  &trans     &trans     &trans     &trans
&trans      &trans          &trans          &trans           &trans  &trans      &trans  &trans                                   &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp N7  &kp N8  &kp N9  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp N0  &kp N1  &kp N2  &kp N3  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4
&trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans      &trans       &trans        &trans        &trans        &trans          &trans
&kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &bt BT_CLR_ALL  &bt BT_CLR
&trans        &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                    &trans
            >;
        };
    };
};
